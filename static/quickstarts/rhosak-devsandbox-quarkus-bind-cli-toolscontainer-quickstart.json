{
  "metadata": {
    "name": "rhosak-devsandbox-quarkus-bind-cli-toolscontainer-quickstart"
  },
  "spec": {
    "conclusion": "You've successfully connected your Quarkus application running on OpenShift to your OpenShift Streams for Apache Kafka instance. You've used Kubernetes Service Binding to automatically inject the configuration parameters to connect to your Kafka instance into your Quarkus application.",
    "description": "Binding your Quarkus application to the OpenShift Streams for Apache Kafka cloud service",
    "displayName": "Binding your Quarkus application to Streams for Apache Kafka",
    "durationMinutes": 10,
    "introduction": "<h3>This quick start shows you how to bind your Quarkus application to your Red Hat OpenShift Streams for Apache Kafka instance.</h3>\n<p>In this Quick Start, you'll bind a Quarkus application to your Kafka instance using Kubernetes Service Binding. Service Binding allows you to communicate connection details and secrets to an application to allow it to bind to a service. In this context, a service can be anything: a Kafka instance, a NoSQL database, etc.\nBy using Service Binding, we no longer need to configure connection details (host, port) authentication mechanisms (SASL, OAuth) and credentials (username/password, client id/client secret) in an application. Instead, Service Binding injects these variables into your application container (as files or environment variables), for your application to consume.\nThe Quarkus Kubernetes Service Binding extension enables Quarkus applications to automatically pickup these variables, injected as files, from the container's filesystem, removing the need to specify any configuration settings in the application resources (e.g configuration files) themselves.",
    "prerequisites": [
      "Access to Red Hat OpenShift Streams for Apache Kafka (for more information, visit https://cloud.redhat.com/application-services).",
      "A running OpenShift Streams for Apache Kafka instance.",
      "A connection (KafkaConnection) betweeen your OpenShift project and your OpenShift Streams for Apache Kafka instance."
    ],
    "tasks": [
      {
        "description": "As the first task, you will deploy a Quarkus application that produces to, and consumes from, a Kafka instance.\nIt's an adapted version of the standard Quarkus Kafka Quick Start, as we've added the Quarkus Kubernetes Service Binding plugin.</p>\n<p>The Quick Start is a PriceConverter application that generates random prices (integers) and sends them to a Kafka topic.\nAnother component of the application consumes these prices, applies a conversion and makes them available via a REST service endpoint.\nThe output can be inspected on a simple webpage.</p>\n<p>To deploy the Quarkus application:</p>\n<ol>\n<li>\n<p>Click on the [perspective switcher]{{highlight qs-perspective-switcher}} at the top of the navigation, and select <strong>Developer</strong>.</p>\n</li>\n<li>\n<p>In the navigation menu, click [Add]{{highlight qs-nav-add}}.</p>\n</li>\n<li>\n<p>Make sure that your OpenShift <strong>Project</strong>, which you can see at the top of the <strong>Add</strong> window, is set to <code>{username}-dev</code> (where <em>{username}</em> is your username in the DevSandbox OpenShift environment).\nThis should be the project in which you have created your <code>KafkaConnection</code> in the <strong>Connecting Red Hat OpenShift Streams for Apache Kafka to OpenShift</strong> Quick Start.</p>\n</li>\n</ol>\n<p>To reduce the wait time of this Quick Start, we have pre-built the container image with the Quarkus application, allowing us to directly deploy the container instead of having to build it.\nThe source code of this application can be found <a href=\"https://github.com/redhat-developer/app-services-guides/tree/main/code-examples/quarkus-kafka-quickstart\">here</a>:</p>\n<ol>\n<li>\n<p>Click on the <strong>Container Image</strong> card.</p>\n</li>\n<li>\n<p>In the <strong>Image name from external registry</strong> field, enter: <code>quay.io/rhoas/rhoas-quarkus-kafka-quickstart</code></p>\n</li>\n<li>\n<p>In the <em>Runtime icon</em>* field, select <code>quarkus</code>.</p>\n</li>\n<li>\n<p>Leave all the the fields set to their default values and click the <strong>Create</strong> button. This will create a new OpenShift <strong>Deployment</strong> for your Quarkus application.</p>\n</li>\n<li>\n<p>You will see the deployment of your Quarkus application in the [Topology]{{highlight qs-perspective-topology}} screen. The icon of your Quarkus applications should have a blue circle around it, indicating that the application has been deployed successfully.</p>\n</li>\n<li>\n<p>Click on the <strong>Open URL</strong> icon in the upper-right of your Quarkus application icon in the Topology view. You will see the default Quarkus page.</p>\n</li>\n<li>\n<p>Add the path <code>/prices.html</code> to the URL of your Quarkus application. This will open the <strong>prices</strong> page of your Quarkus application.\nSince the application is not connected to Kafka yet, the page shows that prices are not available.</p>\n</li>\n<li>\n<p>Go back to your OpenShift Topology view and click on the icon of your Quarkus application. This will open a panel on the righ-hand-side of your screen.\nClick on the <strong>Resources</strong> tab. You will see the <strong>Pods</strong> of your Deployment. Currently we only have a single pod.</p>\n</li>\n<li>\n<p>Click on the <strong>View logs</strong> link next to the pod. In the logs of your application, you will see warnings stating that the application can not connect to Kafka.</p>\n</li>\n</ol>",
        "review": {
          "failedTaskHelp": "This task isn’t verified yet. Try the task again.",
          "instructions": "<h4>Verify that you've deployed your Quarkus application:</h4>\n<p>Do you see a Quarkus application in your Topology view?</p>\n<p>Does the Quarkus application icon have blue circle around it, indicating a successful deployment?</p>\n<p>Did you inspect the logs of your application pod? Did you see the warnings stating that the application could not connect to a Kafka instance?"
        },
        "summary": {
          "failed": "Try the steps again.",
          "success": "Great work! You've deployed your Quarkus application to your OpenShift project/namespace."
        },
        "title": "Deploying your Quarkus application"
      },
      {
        "description": "Your Quarkus application is configured to produce to, and consume from a topic named <code>prices</code>. We therefore need to creat this topic in Streams for Apache Kafka.</p>\n<ol>\n<li>\n<p>Navigate to the In the <strong>Kafka Instances</strong> page of the <a href=\"https://cloud.redhat.com/beta/application-services/streams/kafkas\">Streams for Apache Kafka web console</a>. Click on the name of the Kafka instance that you want to add a topic to.</p>\n</li>\n<li>\n<p>Click <strong>Create topic</strong> and follow the guided steps to define the topic details.  Click <strong>Next</strong> to complete each step and click <strong>Finish</strong> to complete the setup.</p>\n<p><strong>Topic name</strong>: <code>prices</code>.</p>\n<p><strong>Partitions</strong>: <code>1</code></p>\n<p><strong>Message retention</strong>: <code>1 day</code></p>\n<p><strong>Replicas</strong>: Replicas configuration is by default configured as <code>3 replicas</code> and <code>2 min in-sync-replicas</code>.</p>\n</li>\n</ol>\n<p>After you complete the topic setup, the new Kafka topic is listed in the topics table.  Your Quarkus application can now start producing and consuming messages to and from this topic .",
        "review": {
          "failedTaskHelp": "This task isn’t verified yet. Try the task again.",
          "instructions": "Is the new Kafka topic listed in the topics table?"
        },
        "summary": {
          "failed": "Try the steps again.",
          "success": "You have completed this task!"
        },
        "title": "Creating a Kafka topic for your Quarkus application"
      },
      {
        "description": "To bind your Quarkus application to the Streams for Apache Kafka instance, you will use the <code>oc</code> command line tool. We've provided all the tools necessary to complete\nthis Quick Start in an image that you can deploy in your OpenShift project. Alternatively, you can install  OpenShift Client (oc) on your own machine. These tools can be downloaded from:</p>\n<ul>\n<li>oc: <a href=\"https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/\">https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/</a></li>\n</ul>\n<p>To install the tooling image, do the following (if you are using your local installation of the RHOAS CLI, or if you've alread installed the tooling image in a previous Quick Start, you can skip these steps):</p>\n<ol>\n<li>\n<p>Click on the [perspective switcher]{{highlight qs-perspective-switcher}} at the top of the navigation, and select <strong>Developer</strong>.</p>\n</li>\n<li>\n<p>In the navigation menu, click [Add]{{highlight qs-nav-add}}.</p>\n</li>\n<li>\n<p>Make sure that your OpenShift <strong>Project</strong>, which you can see at the top of the <strong>Add</strong> window, is set to <code>{username}-dev</code> (where <em>{username}</em> is your username in the DevSandbox OpenShift environment).</p>\n</li>\n<li>\n<p>Click on the <strong>Container Image</strong> card.</p>\n</li>\n<li>\n<p>In the <strong>Image name from external registry</strong> field, enter: <code>quay.io/rhosak/rhoas-tools</code>.</p>\n</li>\n<li>\n<p>In the <em>Runtime icon</em> field, select <code>openshift</code>.</p>\n</li>\n<li>\n<p>Uncheck the <strong>Route</strong> box and leave all other fields set to their default values.\nYou don't need a route for this application, so under the <strong>Advanced Options</strong> you can uncheck the <strong>create a route to the Application</strong> checkbox.\nClick the <strong>Create</strong> button. This will create a new OpenShift <strong>Deployment</strong> for the tools image.</p>\n</li>\n</ol>\n<p>Pulling the container image and creating the container will take a couple of seconds.</p>\n<ol>\n<li>\n<p>You will see the deployment of the tools image in the [Topology]{{highlight qs-nav-add}} screen. The icon of the application should have a blue circle around it, indicating that the application has been deployed successfully.</p>\n</li>\n<li>\n<p>Click on the icon of the tools application. This will open a panel on the righ-hand-side of your screen.\nClick on the <strong>Resources</strong> tab. You will see the <strong>Pods</strong> of your Deployment. Currently we only have a single pod.</p>\n</li>\n<li>\n<p>Click on the link to the pod. This opens the details page of the pod.</p>\n</li>\n<li>\n<p>Open the <strong>Terminal</strong> tab. This opens a terminal inside the pod. To check whether you can access the required tooling, execute the command <code>oc</code> in your terminal.\nThis should print the OpenShift Client CLI help text.</p>\n</li>\n</ol>\n<p>You now need to connect <code>oc</code> to your OpenShift environment. If you've previously done this in another Quick Start, you might not need to do this again.\nYou can verify this by executing the <code>oc status</code> command. If that returns without errors, showing the current project and the OpenShift instance you're connected to, you can skip the following steps.</p>\n<ol>\n<li>In your terminal, first login the <strong>oc</strong> client to our OpenShift instance. To do this:\n<ol>\n<li>Click on your username in the top-right of the OpenShift console and click <strong>Copy login command</strong></li>\n<li>A new tab opens in your browser with the OpenShift Developer Sandbox login screen. In the <em>Log in with...</em> box, select <strong>DevSandbox</strong>.</li>\n<li>Click on <strong>Display Token</strong>.</li>\n<li>Copy the <code>oc login</code> command.</li>\n<li>Go to your terminal, and execute the command you just copied.</li>\n</ol>\n</li>\n</ol>\n<p>With your <code>oc</code> client connected, point it to the correct project:</p>\n<ol>\n<li>In your terminal, point your <strong>oc</strong> client to the correct OpenShift namespace/project (replace <em>{username}</em> with your username in the Developer Sandbox OpenShift environment): <code>oc project {username}-dev</code>. This should be the project in which you've deployed your Quarkus application and that contains the <code>KafkaConnection</code>.</li>\n<li>Execute the command <code>oc get deployment</code>. This should returen the <strong>Deployment</strong> of you Quarkus application, and the <strong>Deployment</strong> of your tools container (if you're using that container).</li>\n</ol>",
        "review": {
          "failedTaskHelp": "This task isn’t verified yet. Try the task again.",
          "instructions": "<h4>Verify that you've successfully connected your <code>oc</code> client to your OpenShift instance:</h4>\n<p>Did you see the <strong>Deployment</strong> of your Quarkus application as output of the <code>oc get deployment</code> command?"
        },
        "summary": {
          "failed": "Try the steps again.",
          "success": "Great work! You have access to the tooling required for the remainder of this quickstart."
        },
        "title": "Access the required (CLI) Tools."
      },
      {
        "description": "With your Quarkus application running, and your Streams for Apache Kafka instance connected to your namespace, you can now bind your application to your Kafka instance.\nThis is done using the Service Binding Operator, which will inject the configuration values required to connect to your Kafka instance into your Quarkus application.\nThe Quarkus application has been configured to use the <code>quarkus-kubernetes-service-binding</code> <a href=\"https://github.com/DuncanDoyle/quarkus-kafka-quickstart-summit2021/blob/main/pom.xml#L82-L85\">extension</a>\nenabling auto-discovery of the binding files injected into the Quarkus application pod.</p>\n<p>We will create the binding using the <code>rhoas</code> command line tool. In future versions of OpenShift, you will also be able to do this directly from the OpenShift Developer Console.</p>\n<p>To create the binding, we simply use the <code>rhoas cluster bind</code> command, and select the application deployment that we want to bind to our Streams for Apache Kafka instance that has already been connected to our OpenShift project.</p>\n<ol>\n<li>\n<p>Go to the terminal of your tools container (or your own terminal if are using the tooling from your own machine).</p>\n</li>\n<li>\n<p>Execute the command <code>rhoas cluster bind</code>:</p>\n<ol>\n<li>Select the Kafka instance you want your application to connect with (if not already pre-selected).</li>\n<li>Select <code>rhoas-quarkus-kafka-quickstart</code> as the application that you want to connect to your Kafka instance.</li>\n<li>When asked if you want to continue, select <code>y</code> and press <strong>Enter</strong>.</li>\n</ol>\n</li>\n<li>\n<p>The binding will mount the Kafka connection configuration as files into the Quarkus application pod, from where they will be automatically picked up by the <code>quarkus-kubernetes-service-binding</code> extension.</p>\n</li>\n<li>\n<p>With the binding created, your Quarkus application will now redeploy. Go back to the <strong>Topology</strong> screen by clicking on the [Topology]{{highlight qs-nav-add}} in the navigation menu.</p>\n</li>\n<li>\n<p>Click on the <strong>Open URL</strong> icon in the upper-right of your Quarkus application icon in the Topology view. You will see the default Quarkus page.</p>\n</li>\n<li>\n<p>Add the path <code>/prices.html</code> to the URL of your Quarkus application. This will open the <strong>prices</strong> page of your Quarkus application.\nThe application has now been properly configured, and prices are being sent to and consumed from the Kafka topic.</p>\n</li>\n<li>\n<p>Go back to the <strong>Topology</strong> screen, click on the Quarkus application. This will open a panel on the righ-hand-side of your screen.\nClick on the <strong>Resources</strong> tab. You will see the <strong>Pod</strong> of your Deployment. Click on the <strong>View logs</strong> link next to your pod.\nIn the logs of your application, you will see that your Quarkus application has connected to Kafka.</p>\n</li>\n<li>\n<p>In the same screen, click on the <strong>Details</strong> tab. Scroll down until you see the <strong>Volumes</strong> section. Note that there is a <strong>kafka-binding</strong> volume,\nwhich contains the binding files that contain the information required by your Quarkus application to connect to your Kafka instance.\nThese files are auto-discovered and used by the <strong>quarkus-kubernetes-service-binding</strong> extension to automatically connect your Quarkus application to OpenShift Streams for Apache Kafka.</p>\n</li>\n</ol>",
        "review": {
          "failedTaskHelp": "This task isn’t verified yet. Try the task again.",
          "instructions": "<h4>Verify that you've successfully connected your Quarkus application to your OpenShift Streams for Apache Kafka instance:</h4>\n<p>Did you see the <strong>prices</strong> in your Quarkus application's webpage?</p>\n<p>Did you see the binding files mounted in your Quarkus application's pod?</p>\n<p>Did you see your Quarkus application's logs? Did you see it being connected to your Kafka instance?"
        },
        "summary": {
          "failed": "Try the steps again.",
          "success": "Great work! You've connected your Quarkus application to your Streams for Apache Kafka instance using Kubernetes Service Binding."
        },
        "title": "Bind your Quarkus application to your Streams for Apache Kafka instance."
      }
    ]
  }
}